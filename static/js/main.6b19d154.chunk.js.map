{"version":3,"sources":["makeRequest.ts","operations.ts","index.tsx"],"names":["makeRequest","request","http","apiURL","secretToken","localStorage","getItem","prompt","setItem","headers","getAssets","a","keyBy","Promise","all","url","reduce","items","instruments","payload","concat","Row","date","operationType","price","quantity","quantityExecuted","payment","comission","averagePrice","averageQuantity","profit","query","from","subYears","Date","toISOString","to","then","operations","reverse","operationsByFigi","groupBy","filter","status","includes","assets","Object","entries","map","figi","list","ticker","rows","item","prevAveragePrice","last","prevAverageQuantity","directionChanged","push","commission","value","Math","round","console","group","table","groupEnd","main"],"mappings":"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","file":"static/js/main.6b19d154.chunk.js","sourcesContent":["import request from '@tinkoff/request-core';\nimport http from '@tinkoff/request-plugin-protocol-http';\n\nexport const makeRequest = request([ http() ]);","import { makeRequest } from \"./makeRequest\";\nimport { subYears } from 'date-fns';\nimport { keyBy } from \"lodash\";\n\nconst apiURL = 'https://api-invest.tinkoff.ru/openapi';\n// const socketURL = 'wss://api-invest.tinkoff.ru/openapi/md/v1/md-openapi/ws';\n\nlet secretToken = localStorage.getItem('token');\nif (!secretToken) {\n  secretToken = prompt('token') as string;\n  localStorage.setItem('token', secretToken);\n}\n\nconst headers = {\n  'Authorization': `Bearer ${secretToken}`\n};\n\nexport const getOperations = () => makeRequest({\n    url: `${apiURL}/operations`,\n    headers,\n    query: {\n      from: subYears(new Date(), 4).toISOString(),\n      to: new Date().toISOString()\n    }\n  }).then(({ payload: { operations } }) => operations.reverse())\n\n\n  export const getAssets = async () => {\n    return keyBy([...await Promise.all([\n      makeRequest({ url: `${apiURL}/market/stocks`, headers }),\n      makeRequest({ url: `${apiURL}/market/bonds`, headers }),\n      makeRequest({ url: `${apiURL}/market/etfs`, headers }),\n      // makeRequest({ url: `${apiURL}/market/currencies`, headers })\n    ])]\n    .reduce((items, { payload: { instruments } }) => items.concat(instruments), []), 'figi');\n  }\n","import { getOperations, getAssets } from './operations';\nimport { filter, groupBy, last } from 'lodash';\n\nclass Row {\n  constructor(\n    private date: any, \n    private operationType: any, \n    private price: any,\n    private quantity: any,\n    private quantityExecuted: any,\n    private payment: any,\n    private comission: any,\n    private averagePrice: any,\n    private averageQuantity: any,\n    private profit: any\n   // private commission: any\n    ) {\n    //\n  }\n}\n\n\n// var n = Object(c.reverse)(e).reduce(function(e, t) {\n//   return t.operationType.includes(\"Buy\") && (e.count += t.quantity, \n//     e.sum += t.quantity * t.price + (t.commission ? Math.abs(t.commission.value) : 0)), \n//     t.operationType.includes(\"Sell\") && (e.count -= t.quantity, \n//       e.sum -= t.quantity * t.price - (t.commission ? Math.abs(t.commission.value) : 0)), \n//       e.total += t.quantity, 0 === e.count ? {\n//       count: 0,\n//       total: 0,\n//       sum: 0\n//   } : e\n// }, {\n//   count: 0,\n//   total: 0,\n//   sum: 0\n// });\n// return {\n//   price: n.sum / n.count,\n//   quantity: n.count\n// }\n\nconst main = async () => {\n  const operations = await getOperations();\n  let operationsByFigi = groupBy(filter(operations, ({ operationType, status }) => status === 'Done' && ['Buy', 'Sell', 'BuyCard'].includes(operationType)), 'figi');\n  const assets = await getAssets();\n  Object.entries(operationsByFigi).map(([figi, list]) => {\n    if (assets[figi]) {\n      const { ticker } = assets[figi];\n\n      let rows = list.reduce((rows, item) => {\n        let prevAveragePrice = (last(rows) as any)?.averagePrice || item.price;\n        let prevAverageQuantity = (last(rows) as any)?.averageQuantity || 0;\n\n        let averageQuantity = 0;\n        let averagePrice = 0;\n        let profit = 0;\n\n        let directionChanged = false;\n\n        if (item.operationType.includes('Buy')) {\n          averageQuantity = prevAverageQuantity + item.quantityExecuted;\n          if (averageQuantity) {\n            if (prevAverageQuantity < 0 && averageQuantity > 0) {\n              directionChanged = true;\n            } \n          }\n        } else {\n          averageQuantity = prevAverageQuantity - item.quantityExecuted;\n          if (averageQuantity) {\n            if (prevAverageQuantity > 0 && averageQuantity < 0) {\n              directionChanged = true;\n            } \n          }\n        }\n\n\n        if (averageQuantity !== 0) {\n          if (directionChanged) {\n            averagePrice = item.price;\n            profit = (- prevAveragePrice + item.price) * prevAverageQuantity;\n          } else {\n            if (averageQuantity > 0) {\n              if (item.operationType.includes('Buy')) {\n                // console.log(prevAveragePrice, prevAverageQuantity, item.price, item.quantityExecuted, averageQuantity);\n                averagePrice = (prevAveragePrice * prevAverageQuantity + item.price * item.quantityExecuted) / averageQuantity;\n                // console.log(averagePrice);\n              } else {\n                averagePrice = prevAveragePrice;\n                profit = (- prevAveragePrice + item.price) * item.quantityExecuted;\n              }\n            }\n            \n\n\n            if (averageQuantity < 0) {\n              if (item.operationType.includes('Sell')) {\n                averagePrice = (prevAveragePrice * prevAverageQuantity + item.price * item.quantityExecuted) / averageQuantity;\n              } else {\n              averagePrice = prevAveragePrice;\n              profit = (- prevAveragePrice + item.price) * item.quantityExecuted;\n            }\n          \n\n          }\n        }\n        } else {\n          profit = (- prevAveragePrice + item.price) * prevAverageQuantity;\n        }\n        \n        \n        rows.push(new Row(\n          item.date,\n          item.operationType,\n          item.price,\n          item.quantity,\n          item.quantityExecuted,\n          item.payment,\n          item.commission?.value,\n          averagePrice,\n          averageQuantity,\n          Math.round(profit * 100) / 100\n        ));\n        return rows;\n        }, []);\n      console.group(ticker)\n      console.table(rows);\n      console.groupEnd();\n    }\n  });\n}\nmain();\n"],"sourceRoot":""}